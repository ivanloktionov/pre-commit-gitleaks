#!/bin/sh

gitleaksEnabled=$(git config gitleaks.hooks)

if [ $gitleaksEnabled != "enable" ]
then
	echo 'Gitleaks hooks is not enabled, to proceed please perform the following command "git config gitleaks.hooks enable" and try again'
	exit 0
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=$(git hash-object -t tree /dev/null)
fi

echo $against

echo "Gitleaks hooks config is enabled, continue then..."

export PATH=~/bin:$PATH
gitleaks version
gitleaksInstalled=$(echo $?)

if [ $gitleaksInstalled != "0" ]
then
	echo 'Gitleaks is not installed, working on installation'
	os=$(uname -s | tr A-Z a-z)
	arch=$(uname -m | tr A-Z a-z)
	version=$(curl -k -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep '"tag_name":' | grep -Po '\d.*\d')
	if [ $arch = "x86_64"  ]
	then
		arch=x64
		echo $arch
	fi
	
	if [ $os = "macos" ]
	then
		echo "installing for MacOs"
		brew install gitleaks
		gitleaks protect -v --staged --redact
		exit 0
	fi
	if [ $os != "windows" ]
	then
		mkdir -p ~/bin
		echo https://github.com/gitleaks/gitleaks/releases/download/v"$version"/gitleaks_"$version"_"$os"_"$arch".tar.gz
		curl -k -L https://github.com/gitleaks/gitleaks/releases/download/v"$version"/gitleaks_"$version"_"$os"_"$arch".tar.gz | tar -xz gitleaks
		mv -v gitleaks ~/bin
	else
		curl -k -L https://github.com/gitleaks/gitleaks/releases/download/v"$version"/gitleaks_"$version"_"$os"_"$arch".zip -L gitleaks_"$version"_"$os"_"$arch".zip -o gitleaks.zip
		unzip gitleaks.zip -d tmp/
		mkdir -p ~/bin
		cp tmp/gitleaks* ~/bin
		rm -rf tmp/
		rm -rf gitleaks.zip	
	fi

fi
echo 'Gitleaks is installed'
gitleaks protect -v --staged --redact
code=$(echo $?)
if [ $code != "0" ]
then
	echo 'the commit has been cancled'
	git revert $(git log | head -1| sed 's/commit //g')
fi
